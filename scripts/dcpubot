#!/usr/bin/env python
# -*- coding: utf-8 -*-
# adapted from http://www.habnabit.org/twistedex.html
# thanks, habnabit

import sys
import argparse
from ast import literal_eval
from twisted.internet import reactor, protocol
from twisted.words.protocols import irc
from twisted.python import log
from twisted.words.protocols import irc
from twisted.application import internet, service
from sixteen.assembler import AssemblyParser, LabelError
from sixteen.parser import ParserError
from sixteen.dcpu16 import DCPU16
from sixteen.dis import disassembler
from sixteen.utilities import OpcodeError


# argument parsin' stuff
parser = argparse.ArgumentParser(
	description='An irc bot that assembles and evaluates DCPU16 assembly.'
)

parser.add_argument("URL", help="The hostname for the irc server.")
parser.add_argument("channels", help="The irc channels to connect to.",
        nargs="+")
parser.add_argument("port", help="The port to connect to. (default: 6667)",
        type=int, default=6667, nargs="?")

args = parser.parse_args()


class DCPUBot(irc.IRCClient):
    "An irc bot that assembles and evaluates DCPU16 assembly."
    nickname = "dcpubot"

    # the amount of cycles to run each command for
    cycle_limit = 10
    
    def signedOn(self):
        for channel in self.factory.channels:
            self.join(channel)

    def privmsg(self, user, channel, msg):
        user = user.split("!", 1)[0]
        # if we get a message that starts with "dcpubot:"...
        if msg.startswith(self.nickname + ":") or (msg.startswith(">") and not
                msg.startswith(">>")) or msg.startswith(self.nickname + ","):
            stripped = msg.replace(self.nickname + ":", "").replace(">", "")
            # split the given code at "/"
            lines = stripped.split("/")
            # initialize an AssemblyParser
            asm = AssemblyParser()
            try:
                # try assembling the code
                code = asm.parse_tree(lines)
                # read the code to a vm's cpu
                cpu = DCPU16()
                cpu.ram[:len(code)] = code
                cycle_count = 0
                # run for a maximum of self.cycle_limit times
                for _ in xrange(self.cycle_limit):
                    try:
                        state = cpu.cycle()
                        # and then add to the cycle_count
                        cycle_count = state.last_cycles
                    # if there's an illegal opcode (probably 0x0000), stop.
                    except OpcodeError as k:
                        break
                # nicely format the code and the registers
                assembled = " ".join(["%04x" % c for c in code])
                formatted = ["%s: %04x" % (k, v) for k, v in
                        cpu.registers.items() if v != 0]
                # message back the code, the registers, and the cycle count
                self.msg(channel, "%s: %s -> %s (%d)" % (user, assembled,
                    " ".join(formatted), cycle_count))
            except ParserError as e:
                self.msg(channel, "%s: parse error: %s" % (user, e))
            except OpcodeError as k:
                self.msg(channel, "%s: opcode error: %s" % (user, k))
            except LabelError as l:
                self.msg(channel, "%s: label error: %s" % (user, l))
        elif msg.startswith("<<"):
            stripped = msg[2:]
            try:
                code = []
                for c in stripped.split():
                    if c[0] == "0" and c[1] in ("x", "o"):
                        code.append(literal_eval(c))
                    else:
                        code.append(literal_eval("0x" + c))
                d = disassembler()
                cpu = DCPU16()
                cpu.ram[:len(code)] = code
                message = " / ".join(list(a for a, addr in disassembler(cpu)))
                self.msg(channel, "%s: %s" % (user, message))
            except ValueError:
                self.msg(channel, "%s: malformed string." % user)
            except SyntaxError:
                self.msg(channel, "%s: malformed string." % user)
            except Exception as e:
                self.msg(channel, "%s: %s" % (user, e))
            if any(c > 0xffff for c in code):
                self.msg(channel, "%s: malformed string." % user)


class BotFactory(protocol.ClientFactory):
    protocol = DCPUBot
    channels = args.channels


reactor.connectTCP(args.URL, args.port, BotFactory())
log.startLogging(sys.stdout)
reactor.run()
