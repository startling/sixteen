#!/usr/bin/env python
# -*- coding: utf-8 -*-
"Primitive debugger."
#TODO: make this a lot nicer

import sys
import argparse
from sixteen.dcpu16 import DCPU16
from sixteen.devices import Keyboard
from sixteen.screen import LEM1802
from sixteen.debugger import Debugger, ColoredDebugger
from sixteen.utilities import HexRead, file_to_ram


parser = argparse.ArgumentParser(
	description='Step through and debug a DCPU-16 binary.'
)

parser.add_argument('--little', '-l', dest="big_endian", action='store_false', 
	help="Denote that this file should be parsed as little-endian. "
	"(Default: big-endian).",
)

parser.add_argument('--hex', dest="bin", action='store_false', 
	help="Denote that this file should be parsed as an ASCII hex dump. "
	"(Default: binary)"
)

parser.add_argument('--no-color', dest="color", action='store_false', 
	help="Disable colored prompts."
)

parser.add_argument('file',
	help="The binary file to step through."
)

args = parser.parse_args()

# open the file from the command-line, if it's supposed to be a bin
if args.bin:
	f = open(args.file)
else:
	f = HexRead(args.file)

# initialize a new CPU
display = LEM1802()
keyboard = Keyboard()
d = DCPU16([display, keyboard])


# read from the file to the CPU's RAM
file_to_ram(f, d, args.big_endian)


# close the file
f.close()


# run the debugger on the cpu
if args.color:
	debugger = ColoredDebugger(d)
else:
	debugger = Debugger(d)

try:
	debugger()
except KeyboardInterrupt:
	print
except EOFError:
	print
