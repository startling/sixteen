#!/usr/bin/env python
# -*- coding: utf-8 -*-
"A simple disassembler."

import sys
import argparse
import re
from sixteen.dis import disassembler
from sixteen.dcpu16 import DCPU16
from sixteen.utilities import HexRead, file_to_ram, OpcodeError


parser = argparse.ArgumentParser(
	description='Disassemble a DCPU-16 binary.'
)

parser.add_argument('--little', '-l', dest="big_endian", action='store_false', 
	help="Denote that this file should be parsed as little-endian. "
	"(Default: big-endian).",
)

parser.add_argument('--hex', dest="bin", action='store_false', 
	help="Denote that this file should be parsed as an ASCII hex dump. "
	"(Default: binary)"
)

parser.add_argument('--addresses', '-a', action='store_true',
    help="Add the starting address for each instruction in a comment."
)

parser.add_argument('file', nargs="?",
	help="The file to disassemble (defaults to stdin)."
)


args = parser.parse_args()


# open the file from the command-line
if args.bin and args.file:
	f = open(args.file)
elif not args.bin and args.file:
	f = HexRead(args.file)
elif args.bin and not args.file:
    f = sys.stdin
elif not args.bin and not args.file:
    f = HexRead.from_file(sys.stdin)


# initialize a new (disassembling) CPU
d = DCPU16()

# read the file to the CPU's RAM
file_to_ram(f, d, args.big_endian)

# close the file
f.close()


for assembly, address in disassembler(d):
    if args.addresses:
        print "%-20s ; 0x%04x" % (assembly, address)
    else:
        print assembly
